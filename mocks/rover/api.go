// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/objects/roveriface/iface.go

// Package mock_roveriface is a generated GoMock package.
package mock_roveriface

import (
	gomock "github.com/golang/mock/gomock"
	environmentiface "github.com/jecolasurdo/marsrover/pkg/environment/environmentiface"
	roveriface "github.com/jecolasurdo/marsrover/pkg/objects/roveriface"
	spatial "github.com/jecolasurdo/marsrover/pkg/spatial"
	reflect "reflect"
)

// MockRoverBuilder is a mock of RoverBuilder interface
type MockRoverBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockRoverBuilderMockRecorder
}

// MockRoverBuilderMockRecorder is the mock recorder for MockRoverBuilder
type MockRoverBuilderMockRecorder struct {
	mock *MockRoverBuilder
}

// NewMockRoverBuilder creates a new mock instance
func NewMockRoverBuilder(ctrl *gomock.Controller) *MockRoverBuilder {
	mock := &MockRoverBuilder{ctrl: ctrl}
	mock.recorder = &MockRoverBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoverBuilder) EXPECT() *MockRoverBuilderMockRecorder {
	return m.recorder
}

// LaunchRover mocks base method
func (m *MockRoverBuilder) LaunchRover(arg0 spatial.Heading, arg1 spatial.Point, arg2 environmentiface.Environmenter) (roveriface.RoverAPI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchRover", arg0, arg1, arg2)
	ret0, _ := ret[0].(roveriface.RoverAPI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchRover indicates an expected call of LaunchRover
func (mr *MockRoverBuilderMockRecorder) LaunchRover(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchRover", reflect.TypeOf((*MockRoverBuilder)(nil).LaunchRover), arg0, arg1, arg2)
}

// MockRoverAPI is a mock of RoverAPI interface
type MockRoverAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoverAPIMockRecorder
}

// MockRoverAPIMockRecorder is the mock recorder for MockRoverAPI
type MockRoverAPIMockRecorder struct {
	mock *MockRoverAPI
}

// NewMockRoverAPI creates a new mock instance
func NewMockRoverAPI(ctrl *gomock.Controller) *MockRoverAPI {
	mock := &MockRoverAPI{ctrl: ctrl}
	mock.recorder = &MockRoverAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoverAPI) EXPECT() *MockRoverAPIMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockRoverAPI) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockRoverAPIMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRoverAPI)(nil).ID))
}

// CurrentPosition mocks base method
func (m *MockRoverAPI) CurrentPosition() (*spatial.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentPosition")
	ret0, _ := ret[0].(*spatial.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentPosition indicates an expected call of CurrentPosition
func (mr *MockRoverAPIMockRecorder) CurrentPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentPosition", reflect.TypeOf((*MockRoverAPI)(nil).CurrentPosition))
}

// CurrentHeading mocks base method
func (m *MockRoverAPI) CurrentHeading() spatial.Heading {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeading")
	ret0, _ := ret[0].(spatial.Heading)
	return ret0
}

// CurrentHeading indicates an expected call of CurrentHeading
func (mr *MockRoverAPIMockRecorder) CurrentHeading() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeading", reflect.TypeOf((*MockRoverAPI)(nil).CurrentHeading))
}

// ChangeHeading mocks base method
func (m *MockRoverAPI) ChangeHeading(arg0 spatial.Direction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeHeading", arg0)
}

// ChangeHeading indicates an expected call of ChangeHeading
func (mr *MockRoverAPIMockRecorder) ChangeHeading(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeHeading", reflect.TypeOf((*MockRoverAPI)(nil).ChangeHeading), arg0)
}

// Move mocks base method
func (m *MockRoverAPI) Move() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move")
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move
func (mr *MockRoverAPIMockRecorder) Move() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockRoverAPI)(nil).Move))
}
